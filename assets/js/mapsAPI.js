$("#map").css({
    height: '450px',
    style: 'border-radius: 6px'
});
var map;
var service;
var infowindow;

/**
 * Function description
 * Initializes the map generated by the Google Maps API
 *
 * @param - Takes coordinates (gps position) as parameters
 * @return - Does not return Anything
 *
 */
function initMap(coordinates) {
    map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: coordinates[0], lng: coordinates[1]},
        zoom: 11
    });
}

async function remakeMap(place) {
    var coords = await getLatLong(place);
    var destination = new google.maps.LatLng(coords[0], coords[1]);

    infowindow = new google.maps.InfoWindow();

    map = new google.maps.Map(document.getElementById('map'), {
        center: destination,
        zoom: 15
    });

    var request = {
        query: getDestination(),
        fields: ['name', 'geometry'],
        // locationBias: 5000 - Need to fix locationbias, not sure of the syntax
    };

    var service = new google.maps.places.PlacesService(map);

    service.findPlaceFromQuery(request, (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
            for (var i = 0; i < results.length; i++) {
                createMarker(coords[0], coords[1]);
            }
        }
        map.setCenter(destination);
    });
}

function createMarker(coords) {
    var marker;
    
    marker = new google.maps.Marker({
        position: [coords[0], coords[1]],
        map: map,
        title: 'Hello World'
    });

    
}

/**
 * Function description
 * Initializes the map generated by the Google Maps API
 *
 * @param - Takes coordinates (gps position) as parameters
 * @return - Does not return Anything
 *
 */
async function success(position) {
    var lat;
    var long;
    var coords;

    lat = await position.coords.latitude;
    long = await position.coords.longitude;

    coords = [lat ,long];
    console.log(coords);

    initMap(coords);
}

/**
 * Function description
 * Initializes the map generated by the Google Maps API
 *
 * @param - Does not take any parameters
 * @return - Does not return Anything
 *
 */
function reject() {
    console.log("Need permission from user to get location!");
}

/**
 * Function description
 * Gets the users position for initial map loading
 *
 * @param - Takes two functions that run when the permission succesfully or fails to give permission to the browser
 * @return - Does not return Anything
 *
 */
function getUserLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(success, reject);
    }
}

function makeSearchBar() {
    var defaultBounds = new google.maps.LatLngBounds(
        new google.maps.LatLng(47.630026, -122.051930),
        new google.maps.LatLng(47.35541, -122.19241));

    var input = $("#searchField");

    var searchBox = new google.maps.places.SearchBox(input, {
        bounds: defaultBounds
    });
}




