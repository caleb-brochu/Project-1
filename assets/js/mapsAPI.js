$(document).ready(() => {
    $("#map").css({
        height: '450px',
        style: 'border-radius: 6px'
    });


})

/**
 * Function description
 * Initializes the map generated by the Google Maps API
 *
 * @param - Takes coordinates (gps position) as parameters
 * @return - Does not return Anything
 *
 */
function initMap(coordinates) {
    map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: coordinates[0], lng: coordinates[1]},
        zoom: 11
    });
}

async function remakeMap(place, temp, map) {
    map = new google.maps.Map(document.getElementById('map'), {
        zoom: 14
    });
    temp = new google.maps.places.PlacesService(map);
    var coords = await getLatLong(place);
    var destination = new google.maps.LatLng(coords[0], coords[1]);

    var request = {
        query: 'Target' /** Get store names from list of generic clothing stores, get temperature data and suggest a store */,
        fields: ['name', 'geometry'],
        // locationBias: 5000 - Need to fix locationbias, not sure of the syntax
    };

    await temp.findPlaceFromQuery(request, async (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
            await results;

            for (var i = 0; i < results.length; i++) {
                // Create marker on store location
                console.log(coords);
                // createMarker(coords); 
            }
        }
        map.setCenter(destination);
    });
}

// Get store suggestions based on the weather
function getStoreSuggestions(avgTemp, storeList) {
    let pushList = [];

    let coldaf = 20;
    let cold = 32;
    let generic = 65;
    let hot = 75;
    if (avgTemp <= coldaf) {
        for (store in storeList) {
            (this.values() === "coldaf") ? pushList.push(this) : {};
        }
    } else if (avgTemp < cold && avgTemp > coldaf) {
        for (store in storeList) {
            (this.values() === "cold") ? pushList.push(this) : {};
        }
    } else if (avgTemp <= generic && avgTemp >= cold) {
        for (store in storeList) {
            (this.values() === "generic") ? pushList.push(this) : {};
        }    
    } else {
        for (store in storeList) {
            (this.values() === "hot") ? pushList.push(this) : {};
        }
    } 

    return pushList;
}

// Gets store position and returns lat and long to be passed on to createMarker() 
function getStorePosition(store) {
    var request = {
        query: store,
        fields: ['name', 'geometry']
    };

    service.findPlaceFromQuery(request, (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
            for (var i = 0; i < results.length; i++) {
                console.log(results[i]);
                // createMarker(results[i]);
            }
        }
    })
}

// Creates marker on store location passed in by getStorePosition
function createMarker(store) {
  var marker;
  var mapOptions;

  mapOptions = {
      zoom: 14
  }

  map = new google.maps.Map(document.getElementById('map'), mapOptions)
  
  marker = new google.maps.Marker({
      map: map,
      // Get position of store and send it here
      position: store.geometry.location,
  });

  google.maps.event.addListener(marker, 'click', () => {
      infowindow.setContent(store.name);
      infowindow.open(map, this);
  })    
}

/**
 * Function description
 * Initializes the map generated by the Google Maps API
 *
 * @param - Takes coordinates (gps position) as parameters
 * @return - Does not return Anything
 *
 */
async function success(position) {
    var lat;
    var long;
    var coords;

    lat = await position.coords.latitude;
    long = await position.coords.longitude;

    coords = [lat ,long];

    initMap(coords);
}

/**
 * Function description
 * Initializes the map generated by the Google Maps API
 *
 * @param - Does not take any parameters
 * @return - Does not return Anything
 *
 */
function reject() {
    console.log("Need permission from user to get location!");
}

/**
 * Function description
 * Gets the users position for initial map loading
 *
 * @param - Takes two functions that run when the permission succesfully or fails to give permission to the browser
 * @return - Does not return Anything
 *
 */
function getUserLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(success, reject);
    }
}




